type Query {

    tasks(
        assignee: String @doc(d: "Only select tasks which are assigned to the given user.")
        name: String @doc(d: "Only select tasks with the given name")
        nameLike: String @doc(d: "Only select tasks with a name matching the parameter. The syntax is that of SQL: for example usage: nameLike(%activiti%)")
    )
    : [Task]
    @doc(d: "Allows programmatic querying of Tasks based on the public Interface org.camunda.bpm.engine.task.TaskQuery")

    task(
        id: String!
    ): Task
 
    processesInstances(
        businessKey: String @doc(d: "Only select process instances with a certain business key.")
    ): [ProcessInstance]

    processInstance(
        id: String!
        businessKey: String @doc(d: "Only select process instance with a certain business key.")
    ): ProcessInstance
}

type Mutation {
    setAssignee(
        taskEntityId: String!
        assignee: String!
    )
    : TaskEntity
    @doc(d: "sets the assignee of a Task")

    createProcessInstance(
        processDefintionKey: String!  @doc(d: "unique name for all versions this definition")
    )
    : ProcessInstance
    @doc(d: "Starts a new process instance in the latest version of the process definition with the given key.")

    completeTask(
        taskId: String! 
        variables: [KeyValuePairInput]!    
    )
    : ProcessInstance
    @doc(d: "Marks a task as done and continues process execution. This method is typically called by a task list user interface after a task form has been submitted by the assignee and the required task parameters have been provided.")

    claimTask(
        taskId: String! @doc(d: "task to claim, cannot be null.")
        userId: String @doc(d: "user that claims the task. When userId is null the task is unclaimed, assigned to no one.")
    )
    : Task
    @doc(d: "Claim responsibility for a task: the given user is made assignee for the task. The difference with setAssignee(String, String) is that here a check is done if the task already has a user assigned to it. No check is done whether the user is known by the identity component.")
}

type KeyValuePair {
    key: String!
    value: String!
    valueType: String
}

input KeyValuePairInput {
    key: String!
    value: String!
    valueType: String
}


type ProcessDefinition {
    id: String
    name: String
}